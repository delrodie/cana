<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NoResultException;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Liste des facture
     */
    public function findList()
    {
        return $this->createQueryBuilder('f')->orderBy('f.id', 'DESC')->getQuery()->getResult();
    }

    /**
     * LA facture concernée pas le versement
     */
    public function findFacture($facture)
    {
        return $this->createQueryBuilder('f')->where('f.slug = :slug')->setParameter('slug', $facture);
    }
    /**
     * Recherche du numero de la facture
     */
    public function getFactureNumber()
    {
        // Recherche du nombre de facture
        $compteur = $this->createQueryBuilder('f')->select('count(f.id)')->getQuery()->getSingleScalarResult();

        if ($compteur != 0){
            // Si le compteur est different de 0 alors recuperer le dernier ID
            $q = $this->createQueryBuilder('c')->select('c.id')->orderBy('c.id', 'DESC')->setMaxResults(1);
            try{
                $qb = $q->getQuery()->getSingleScalarResult();
                // Incrementé de +1 l'id puis affecter sur 4 positions
                $id = $qb + 1;
                if ($id < 10){ return '000'.$id; }
                elseif ($id < 100){ return '00'.$id; }
                elseif ($id < 1000){ return '0'.$id; }
                else{ return $id; }
            } catch (NoResultException $e){
                return $e;
            }
        } else{
            return $code = '0001';
        }
    }

    /**
     * Calcul du nombre de client selon le mois
     * use DefaultController::index
     */
    public function findNombreClient()
    {
        return $this->createQueryBuilder('f')
                    ->select('count(f.id)')
                    ->where('f.date >= :debut')
                    ->andWhere('f.date <= :fin')
                    ->groupBy('f.client')
                    ->setParameters([
                        'debut' => date('Y-m-01', time()),
                        'fin' => date('Y-m-31', time())
                    ])
                    ->getQuery()->getScalarResult()

            ;
    }

    /**
     * Determination du nombre de facture impayées
     * use DefaultController::index
     */
    public function findNombreFacture($solde=null)
    {
        if ($solde){
            return $this->createQueryBuilder('f')
                        ->select('count(f.id)')
                        ->where('f.rap = 0')
                        ->andWhere('f.statut = 1')
                        ->getQuery()->getSingleScalarResult()
                ;
        }else{
            return $this->createQueryBuilder('f')
                        ->select('count(f.id)')
                        ->where('f.rap <> 0')
                        ->andWhere('f.statut = 1')
                        ->getQuery()->getSingleScalarResult()
                ;
        }
    }

    /**
     * Recherche de la facture ou du nom
     * use RechercheController::index
     */
    public function recherche($search)
    {
        return $this->createQueryBuilder('f')
                    ->leftJoin('f.monture', 'm')
                    ->leftJoin('f.client', 'c')
                    ->leftJoin('f.peniche', 'p')
                    ->where('f.numero LIKE :search')
                    ->orWhere('m.reference LIKE :search')
                    ->orWhere('c.nom LIKE :search')
                    ->orWhere('c.prenoms LIKE :search')
                    ->orWhere('f.montantTTC LIKE :search')
                    ->orWhere('p.nom LIKE :search')
                    ->orWhere('p.numero LIKE :search')
                    ->setParameter('search', '%'.$search.'%')
                    ->getQuery()->getResult()
            ;
    }

    /**
     * Liste des factures selon la periode
     * use RechercheController::caisse
     */
    public function findCaissePeriode($debut = null, $fin = null)
    {
        if ($debut){
            if ($fin){
                return $this->createQueryBuilder('f')
                            ->where('f.statut = 1')
                            -> andWhere('f.date >= :debut')
                            ->andWhere('f.date <= :fin')
                            ->orderBy('f.date', 'DESC')
                            ->setParameters([
                                'debut' => $debut,
                                'fin' => $fin
                            ])
                            ->getQuery()->getResult()
                    ;
            }else{
                return $this->createQueryBuilder('f')
                            ->where('f.statut = 1')
                            ->andWhere('f.date >= :debut')
                            ->andWhere('f.date <= :fin')
                            ->orderBy('f.date', 'DESC')
                            ->setParameters([
                                'debut' => $debut,
                                'fin' => date('Y-m-d', time())
                            ])
                            ->getQuery()->getResult()
                            ;
            }
        }elseif ($fin){
            return $this->createQueryBuilder('f')
                        ->where('f.statut = 1')
                        ->andWhere('f.date <= :fin')
                        ->orderBy('f.date', 'DESC')
                        ->setParameter('fin', $fin)
                        ->getQuery()->getResult()
                ;
        }else{
            return $this->createQueryBuilder('f')
                        ->where('f.statut = 1')
                        ->orderBy('f.date', 'DESC')
                        ->getQuery()->getResult()
                ;
        }
    }

    /**
     * Les factures non livrées
     */
    public function findLivraison($statut = null)
    {
        if ($statut){
            return $this->createQueryBuilder('f')
                ->where('f.livraison IS NOT NULL')
                ->getQuery()->getResult()
                ;
        }else{
            return $this->createQueryBuilder('f')
                ->where('f.livraison IS NULL')
                ->getQuery()->getResult()
                ;
        }
    }

    public function findByAssurance($assurance,$debut,$fin)
    {
        return $this->createQueryBuilder('f')
                    ->innerJoin('f.client', 'c')
                    ->innerJoin('c.assurance', 'a')
                    ->where('a.slug = :assurance')
                    ->andWhere('f.date >= :debut')
                    ->andWhere('f.date <= :fin')
                    ->setParameters([
                        'assurance'=>$assurance,
                        'debut'=>$debut,
                        'fin'=>$fin,
                    ])
                    ->getQuery()->getResult()
            ;
    }
}
